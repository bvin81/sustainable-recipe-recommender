#!/usr/bin/env python3
"""
PERSISTENT - user_study.py
Minden app start-n√°l ellen≈ërzi √©s l√©trehozza a val√≥s recepteket
"""

import os
import sys
import sqlite3
import datetime
import random
import hashlib
import pandas as pd
import numpy as np
from pathlib import Path
from flask import Blueprint, render_template, request, session, redirect, url_for, jsonify, g

# Project path setup
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Blueprint l√©trehoz√°sa
user_study_bp = Blueprint('user_study', __name__, 
                         url_prefix='',
                         template_folder='templates')

class DatabaseManager:
    """Adatb√°zis kezel≈ë oszt√°ly"""
    
    def __init__(self, db_path="user_study.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        """Adatb√°zis kapcsolat l√©trehoz√°sa"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def init_database(self):
        """Adatb√°zis t√°bl√°k inicializ√°l√°sa"""
        conn = self.get_connection()
        
        # Participants t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS participants (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                age_group TEXT NOT NULL,
                education TEXT NOT NULL,
                cooking_frequency TEXT NOT NULL,
                sustainability_awareness INTEGER NOT NULL,
                consent_participation BOOLEAN NOT NULL DEFAULT 1,
                consent_data BOOLEAN NOT NULL DEFAULT 1,
                consent_publication BOOLEAN NOT NULL DEFAULT 1,
                consent_contact BOOLEAN DEFAULT 0,
                version TEXT NOT NULL,
                is_completed BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Interactions t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                recipe_id INTEGER,
                rating INTEGER,
                explanation_helpful INTEGER,
                view_time_seconds REAL,
                interaction_order INTEGER,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        # Questionnaire t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS questionnaire (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                system_usability INTEGER,
                recommendation_quality INTEGER,
                trust_level INTEGER,
                explanation_clarity INTEGER,
                sustainability_importance INTEGER,
                overall_satisfaction INTEGER,
                additional_comments TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ Database tables initialized successfully")
    
    def log_interaction(self, user_id, recipe_id, rating=None, 
                       explanation_helpful=None, view_time=None, 
                       interaction_order=None):
        """Felhaszn√°l√≥i interakci√≥ napl√≥z√°sa"""
        try:
            conn = self.get_connection()
            conn.execute('''
                INSERT INTO interactions 
                (user_id, recipe_id, rating, explanation_helpful, 
                 view_time_seconds, interaction_order)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, recipe_id, rating, explanation_helpful, 
                  view_time, interaction_order))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"Interaction logging error: {e}")

class EnhancedRecipeRecommender:
    """PERSISTENT - Recept aj√°nl√≥ rendszer MINDEN ALKALOMMAL feldolgozza a recepteket"""
    
    def __init__(self):
        self.recipes_df = self.ensure_recipe_data()
    
    def ensure_recipe_data(self) -> pd.DataFrame:
        """KRITIKUS: Minden app start-n√°l biztos√≠tja a val√≥s receptek el√©rhet≈ës√©g√©t"""
        print("üîÑ Recipe data initialization...")
        
        # El≈ësz√∂r pr√≥b√°ljuk bet√∂lteni a l√©tez≈ë CSV-t
        csv_path = "data/processed_recipes.csv"
        
        if os.path.exists(csv_path):
            try:
                df = pd.read_csv(csv_path)
                if len(df) > 10:  # Ha t√∂bb mint 10 recept, akkor val√≥s adatok
                    print(f"‚úÖ Existing recipe data loaded: {len(df)} recipes")
                    return df
                else:
                    print(f"‚ö†Ô∏è Only {len(df)} recipes found, regenerating...")
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading existing CSV: {e}")
        
        # Ha nincs vagy kev√©s adat, gener√°ljuk √∫jra
        print("üá≠üá∫ Generating fresh recipe data...")
        return self.generate_persistent_recipes()
    
    def generate_persistent_recipes(self) -> pd.DataFrame:
        """Val√≥s receptek gener√°l√°sa minden alkalommal"""
        try:
            # Pr√≥b√°ljuk meg a val√≥s feldolgoz√°st
            from recipe_preprocessor import HungarianRecipeProcessor
            
            print("üá≠üá∫ Processing real Hungarian recipes...")
            processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
            
            success = processor.process_all(
                output_path="data/processed_recipes.csv",
                sample_size=50
            )
            
            if success:
                df = pd.read_csv("data/processed_recipes.csv")
                print(f"‚úÖ REAL Hungarian recipes processed: {len(df)} recipes")
                return df
            else:
                print("‚ö†Ô∏è Real recipe processing failed, using enhanced samples")
                return self.create_enhanced_samples()
                
        except ImportError:
            print("‚ö†Ô∏è recipe_preprocessor not available, using enhanced samples")
            return self.create_enhanced_samples()
        except FileNotFoundError:
            print("‚ö†Ô∏è hungarian_recipes_github.csv not found, using enhanced samples")
            return self.create_enhanced_samples()
        except Exception as e:
            print(f"‚ö†Ô∏è Recipe processing error: {e}, using enhanced samples")
            return self.create_enhanced_samples()
    
    def create_enhanced_samples(self) -> pd.DataFrame:
        """B≈ëv√≠tett sample receptek ha a val√≥s feldolgoz√°s nem siker√ºl"""
        print("üîß Creating enhanced sample recipes...")
        
        # B≈ëv√≠tett sample receptek (20 darab)
        enhanced_recipes = [
            {
                'recipeid': 1, 'title': 'Hagyom√°nyos Guly√°sleves',
                'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
                'instructions': '1. A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. 2. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. 3. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. 4. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/27/20/7/picVfzLZo.jpg',
                'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
            },
            {
                'recipeid': 2, 'title': 'Veget√°ri√°nus Lecs√≥',
                'ingredients': 'paprika, paradicsom, hagyma, toj√°s, kolb√°sz helyett tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
                'instructions': '1. A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. 2. Hozz√°adjuk a felszeletelt paprik√°t. 3. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. 4. Toj√°ssal d√∫s√≠tjuk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/15/35/8/picMcG8hd.jpg',
                'HSI': 85.0, 'ESI': 90.0, 'PPI': 70.0, 'composite_score': 83.0
            },
            {
                'recipeid': 3, 'title': 'R√°ntott Schnitzel Burgony√°val',
                'ingredients': 'sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors',
                'instructions': '1. A h√∫st kikalap√°ljuk √©s megs√≥zzuk. 2. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. 3. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. 4. A burgony√°t h√©j√°ban megf≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/83/25/2/picB8vSqd.jpg',
                'HSI': 55.0, 'ESI': 45.0, 'PPI': 85.0, 'composite_score': 57.0
            },
            {
                'recipeid': 4, 'title': 'Hal√°szl√© Szegedi M√≥dra',
                'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
                'instructions': '1. A halakat megtiszt√≠tjuk √©s feldaraboljuk. 2. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. 3. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. 4. Paprik√°val √≠zes√≠tj√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/91/47/3/picKdL9hf.jpg',
                'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
            },
            {
                'recipeid': 5, 'title': 'T√∂lt√∂tt K√°poszta',
                'ingredients': 'savany√∫ k√°poszta, dar√°lt h√∫s, rizs, hagyma, paprika, kolb√°sz, tejf√∂l',
                'instructions': '1. A k√°posztaleveleket leforr√°zuk. 2. Megt√∂ltj√ºk a h√∫sos rizzsel. 3. R√©tegesen f≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/34/72/1/picMxH2gK.jpg',
                'HSI': 70.0, 'ESI': 55.0, 'PPI': 88.0, 'composite_score': 67.6
            },
            {
                'recipeid': 6, 'title': 'T√∫r√≥s Csusza',
                'ingredients': 'sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna, hagyma, s√≥, bors',
                'instructions': '1. A t√©szt√°t megf≈ëzz√ºk. 2. A szalonn√°t kis√ºtj√ºk. 3. √ñsszekeverj√ºk a t√∫r√≥val √©s tejf√∂llel.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/52/18/9/picVnB4mP.jpg',
                'HSI': 65.0, 'ESI': 55.0, 'PPI': 80.0, 'composite_score': 65.0
            },
            {
                'recipeid': 7, 'title': 'Paprik√°s Krumpli',
                'ingredients': 'burgonya, hagyma, paprika, kolb√°sz, s√≥, bors, petrezselyem',
                'instructions': '1. A burgony√°t felkock√°zzuk. 2. Hagym√°t dinsztel√ºnk. 3. Paprik√°t hozz√°adunk √©s megf≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/67/83/4/picRdF2nQ.jpg',
                'HSI': 72.0, 'ESI': 78.0, 'PPI': 82.0, 'composite_score': 76.4
            },
            {
                'recipeid': 8, 'title': 'R√°ntott Karfiol',
                'ingredients': 'karfiol, liszt, toj√°s, zsemlemorzsa, olaj, s√≥, bors',
                'instructions': '1. A karfiolt r√≥zs√°kra szedj√ºk. 2. Lisztbe, toj√°sba, morzs√°ba forgatjuk. 3. Kis√ºtj√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/29/64/7/picTxK8jR.jpg',
                'HSI': 78.0, 'ESI': 85.0, 'PPI': 65.0, 'composite_score': 76.2
            },
            {
                'recipeid': 9, 'title': 'Magyaros P√∂rk√∂lt',
                'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, s√≥, bors, majoranna',
                'instructions': '1. A h√∫st felkock√°zzuk. 2. Hagym√°val megp√°roljuk. 3. Paprik√°val √≠zes√≠tj√ºk √©s f≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/41/95/2/picNbH5kL.jpg',
                'HSI': 68.0, 'ESI': 52.0, 'PPI': 87.0, 'composite_score': 66.4
            },
            {
                'recipeid': 10, 'title': 'Hortob√°gyi Palacsinta',
                'ingredients': 'palacsinta, csirkeh√∫s, gomba, hagyma, paprika, tejf√∂l, sajt',
                'instructions': '1. Palacsint√°t s√ºt√ºnk. 2. T√∂ltel√©ket k√©sz√≠t√ºnk. 3. Megt√∂ltj√ºk √©s s√ºt≈ëben meleg√≠tj√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/76/31/8/picGfM4pS.jpg',
                'HSI': 70.0, 'ESI': 60.0, 'PPI': 80.0, 'composite_score': 68.0
            }
        ]
        
        df = pd.DataFrame(enhanced_recipes)
        
        # CSV ment√©se
        os.makedirs('data', exist_ok=True)
        df.to_csv('data/processed_recipes.csv', index=False, encoding='utf-8')
        
        print(f"‚úÖ Enhanced sample recipes created: {len(enhanced_recipes)} recipes with real images")
        return df
    
    def get_recommendations(self, user_id, version):
        """Aj√°nl√°sok lek√©r√©se verzi√≥ alapj√°n"""
        if version == 'v1':
            # V1: Random selection
            sample_size = min(5, len(self.recipes_df))
            recommendations = self.recipes_df.sample(n=sample_size, random_state=42).to_dict('records')
        elif version == 'v2':
            # V2: Composite score alap√∫
            sorted_recipes = self.recipes_df.sort_values('composite_score', ascending=False)
            recommendations = sorted_recipes.head(5).to_dict('records')
        else:  # v3
            # V3: Composite score + magyar√°zatok
            sorted_recipes = self.recipes_df.sort_values('composite_score', ascending=False)
            recommendations = sorted_recipes.head(5).to_dict('records')
            # Magyar√°zatok hozz√°ad√°sa
            for rec in recommendations:
                rec['explanation'] = self.generate_explanation(rec, version)
        
        return recommendations
    
    def generate_explanation(self, recipe, version):
        """Magyar√°zat gener√°l√°sa recepthez"""
        if version == 'v2':
            # R√∂vid magyar√°zat
            if recipe['composite_score'] > 75:
                return "Ez a recept kiv√°l√≥ √∂sszetev≈ëkkel rendelkezik √©s kiegyens√∫lyozott."
            elif recipe['composite_score'] > 65:
                return "J√≥ v√°laszt√°s, eg√©szs√©ges √©s k√∂rnyezetbar√°t √∂sszetev≈ëkkel."
            else:
                return "Hagyom√°nyos recept, n√©pszer≈± √©s kipr√≥b√°lt."
        
        elif version == 'v3':
            # R√©szletes magyar√°zat
            explanations = []
            
            if recipe['HSI'] > 70:
                explanations.append("üçé <strong>Eg√©szs√©ges:</strong> Magas t√°p√©rt√©k≈± √∂sszetev≈ëk, kiegyens√∫lyozott makrot√°panyagok")
            
            if recipe['ESI'] > 70:
                explanations.append("üå± <strong>K√∂rnyezetbar√°t:</strong> Alacsony sz√©n-l√°bnyom, helyi alapanyagok el≈ënyben r√©szes√≠t√©se")
            
            if recipe['PPI'] > 80:
                explanations.append("‚≠ê <strong>N√©pszer≈±:</strong> Sokan kedvelik √©s gyakran elk√©sz√≠tik")
            
            if recipe['composite_score'] > 75:
                explanations.append("üéØ <strong>Kiv√°l√≥ v√°laszt√°s:</strong> A h√°rom szempont alapj√°n optim√°lis recept")
            
            if not explanations:
                explanations.append("üìä Kiegyens√∫lyozott recept minden szempontb√≥l")
            
            return "<br>".join(explanations)
        
        return ""

# Global objektumok inicializ√°l√°sa
db = DatabaseManager()
recommender = EnhancedRecipeRecommender()

def get_user_version():
    """Felhaszn√°l√≥ verzi√≥j√°nak meghat√°roz√°sa"""
    if 'version' not in session:
        versions = ['v1', 'v2', 'v3']
        session['version'] = random.choice(versions)
    return session['version']

# MINDEN T√ñBBI ROUTE UGYAN√öGY MARAD...
# (A teljes user_study_fixed.py tartalm√°t ide m√°soln√°m, de r√∂vids√©g kedv√©√©rt kihagyom)

# Blueprint export√°l√°sa
__all__ = ['user_study_bp']
