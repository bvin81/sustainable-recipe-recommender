#!/usr/bin/env python3
"""
COMPLETE FIX - user_study.py
Teljes user_study.py persistent receptekkel + minden route
"""

import os
import sys
import sqlite3
import datetime
import random
import hashlib
import pandas as pd
import numpy as np
from pathlib import Path
from flask import Blueprint, render_template, request, session, redirect, url_for, jsonify, g

# Project path setup
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Blueprint l√©trehoz√°sa
user_study_bp = Blueprint('user_study', __name__, 
                         url_prefix='',
                         template_folder='templates')

class DatabaseManager:
    """Adatb√°zis kezel≈ë oszt√°ly"""
    
    def __init__(self, db_path="user_study.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        """Adatb√°zis kapcsolat l√©trehoz√°sa"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def init_database(self):
        """Adatb√°zis t√°bl√°k inicializ√°l√°sa"""
        conn = self.get_connection()
        
        # Participants t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS participants (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                age_group TEXT NOT NULL,
                education TEXT NOT NULL,
                cooking_frequency TEXT NOT NULL,
                sustainability_awareness INTEGER NOT NULL,
                consent_participation BOOLEAN NOT NULL DEFAULT 1,
                consent_data BOOLEAN NOT NULL DEFAULT 1,
                consent_publication BOOLEAN NOT NULL DEFAULT 1,
                consent_contact BOOLEAN DEFAULT 0,
                version TEXT NOT NULL,
                is_completed BOOLEAN DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Interactions t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                recipe_id INTEGER,
                rating INTEGER,
                explanation_helpful INTEGER,
                view_time_seconds REAL,
                interaction_order INTEGER,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        # Questionnaire t√°bla
        conn.execute('''
            CREATE TABLE IF NOT EXISTS questionnaire (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                system_usability INTEGER,
                recommendation_quality INTEGER,
                trust_level INTEGER,
                explanation_clarity INTEGER,
                sustainability_importance INTEGER,
                overall_satisfaction INTEGER,
                additional_comments TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES participants (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ Database tables initialized successfully")
    
    def log_interaction(self, user_id, recipe_id, rating=None, 
                       explanation_helpful=None, view_time=None, 
                       interaction_order=None):
        """Felhaszn√°l√≥i interakci√≥ napl√≥z√°sa"""
        try:
            conn = self.get_connection()
            conn.execute('''
                INSERT INTO interactions 
                (user_id, recipe_id, rating, explanation_helpful, 
                 view_time_seconds, interaction_order)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, recipe_id, rating, explanation_helpful, 
                  view_time, interaction_order))
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"Interaction logging error: {e}")

class EnhancedRecipeRecommender:
    """PERSISTENT - Recept aj√°nl√≥ rendszer automatikus recept gener√°l√°ssal"""
    
    def __init__(self):
        self.recipes_df = self.ensure_recipe_data()
    
    def ensure_recipe_data(self) -> pd.DataFrame:
        """Biztos√≠tja a receptek el√©rhet≈ës√©g√©t minden app start-n√°l"""
        print("üîÑ Recipe data initialization...")
        
        # El≈ësz√∂r pr√≥b√°ljuk bet√∂lteni a l√©tez≈ë CSV-t
        csv_path = "data/processed_recipes.csv"
        
        if os.path.exists(csv_path):
            try:
                df = pd.read_csv(csv_path)
                if len(df) > 10:  # Ha t√∂bb mint 10 recept, akkor val√≥s adatok
                    print(f"‚úÖ Existing recipe data loaded: {len(df)} recipes")
                    return df
                else:
                    print(f"‚ö†Ô∏è Only {len(df)} recipes found, regenerating...")
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading existing CSV: {e}")
        
        # Ha nincs vagy kev√©s adat, gener√°ljuk √∫jra
        print("üá≠üá∫ Generating fresh recipe data...")
        return self.generate_persistent_recipes()
    
    def generate_persistent_recipes(self) -> pd.DataFrame:
        """Val√≥s receptek gener√°l√°sa vagy enhanced samples"""
        try:
            # Pr√≥b√°ljuk meg a val√≥s feldolgoz√°st
            from recipe_preprocessor import HungarianRecipeProcessor
            
            print("üá≠üá∫ Processing real Hungarian recipes...")
            processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
            
            success = processor.process_all(
                output_path="data/processed_recipes.csv",
                sample_size=50
            )
            
            if success:
                df = pd.read_csv("data/processed_recipes.csv")
                print(f"‚úÖ REAL Hungarian recipes processed: {len(df)} recipes")
                return df
            else:
                print("‚ö†Ô∏è Real recipe processing failed, using enhanced samples")
                return self.create_enhanced_samples()
                
        except ImportError:
            print("‚ö†Ô∏è recipe_preprocessor not available, using enhanced samples")
            return self.create_enhanced_samples()
        except FileNotFoundError:
            print("‚ö†Ô∏è hungarian_recipes_github.csv not found, using enhanced samples")
            return self.create_enhanced_samples()
        except Exception as e:
            print(f"‚ö†Ô∏è Recipe processing error: {e}, using enhanced samples")
            return self.create_enhanced_samples()
    
    def create_enhanced_samples(self) -> pd.DataFrame:
        """Enhanced sample receptek val√≥s k√©pekkel"""
        print("üîß Creating enhanced sample recipes...")
        
        # B≈ëv√≠tett sample receptek (20 darab)
        enhanced_recipes = [
            {
                'recipeid': 1, 'title': 'Hagyom√°nyos Guly√°sleves',
                'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
                'instructions': '1. A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. 2. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. 3. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. 4. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/27/20/7/picVfzLZo.jpg',
                'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
            },
            {
                'recipeid': 2, 'title': 'Veget√°ri√°nus Lecs√≥',
                'ingredients': 'paprika, paradicsom, hagyma, toj√°s, kolb√°sz helyett tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
                'instructions': '1. A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. 2. Hozz√°adjuk a felszeletelt paprik√°t. 3. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. 4. Toj√°ssal d√∫s√≠tjuk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/15/35/8/picMcG8hd.jpg',
                'HSI': 85.0, 'ESI': 90.0, 'PPI': 70.0, 'composite_score': 83.0
            },
            {
                'recipeid': 3, 'title': 'R√°ntott Schnitzel Burgony√°val',
                'ingredients': 'sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors',
                'instructions': '1. A h√∫st kikalap√°ljuk √©s megs√≥zzuk. 2. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. 3. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. 4. A burgony√°t h√©j√°ban megf≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/83/25/2/picB8vSqd.jpg',
                'HSI': 55.0, 'ESI': 45.0, 'PPI': 85.0, 'composite_score': 57.0
            },
            {
                'recipeid': 4, 'title': 'Hal√°szl√© Szegedi M√≥dra',
                'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
                'instructions': '1. A halakat megtiszt√≠tjuk √©s feldaraboljuk. 2. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. 3. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. 4. Paprik√°val √≠zes√≠tj√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/91/47/3/picKdL9hf.jpg',
                'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
            },
            {
                'recipeid': 5, 'title': 'T√∂lt√∂tt K√°poszta',
                'ingredients': 'savany√∫ k√°poszta, dar√°lt h√∫s, rizs, hagyma, paprika, kolb√°sz, tejf√∂l',
                'instructions': '1. A k√°posztaleveleket leforr√°zuk. 2. Megt√∂ltj√ºk a h√∫sos rizzsel. 3. R√©tegesen f≈ëzz√ºk.',
                'images': 'https://img.sndimg.com/food/image/upload/w_555,h_416,c_fit,fl_progressive,q_95/v1/img/recipes/34/72/1/picMxH2gK.jpg',
                'HSI': 70.0, 'ESI': 55.0, 'PPI': 88.0, 'composite_score': 67.6
            }
        ]
        
        df = pd.DataFrame(enhanced_recipes)
        
        # CSV ment√©se
        os.makedirs('data', exist_ok=True)
        df.to_csv('data/processed_recipes.csv', index=False, encoding='utf-8')
        
        print(f"‚úÖ Enhanced sample recipes created: {len(enhanced_recipes)} recipes with real images")
        return df
    
    def get_recommendations(self, user_id, version):
        """Aj√°nl√°sok lek√©r√©se verzi√≥ alapj√°n"""
        if version == 'v1':
            # V1: Random selection
            sample_size = min(5, len(self.recipes_df))
            recommendations = self.recipes_df.sample(n=sample_size, random_state=42).to_dict('records')
        elif version == 'v2':
            # V2: Composite score alap√∫
            sorted_recipes = self.recipes_df.sort_values('composite_score', ascending=False)
            recommendations = sorted_recipes.head(5).to_dict('records')
        else:  # v3
            # V3: Composite score + magyar√°zatok
            sorted_recipes = self.recipes_df.sort_values('composite_score', ascending=False)
            recommendations = sorted_recipes.head(5).to_dict('records')
            # Magyar√°zatok hozz√°ad√°sa
            for rec in recommendations:
                rec['explanation'] = self.generate_explanation(rec, version)
        
        return recommendations
    
    def generate_explanation(self, recipe, version):
        """Magyar√°zat gener√°l√°sa recepthez"""
        if version == 'v2':
            # R√∂vid magyar√°zat
            if recipe['composite_score'] > 75:
                return "Ez a recept kiv√°l√≥ √∂sszetev≈ëkkel rendelkezik √©s kiegyens√∫lyozott."
            elif recipe['composite_score'] > 65:
                return "J√≥ v√°laszt√°s, eg√©szs√©ges √©s k√∂rnyezetbar√°t √∂sszetev≈ëkkel."
            else:
                return "Hagyom√°nyos recept, n√©pszer≈± √©s kipr√≥b√°lt."
        
        elif version == 'v3':
            # R√©szletes magyar√°zat
            explanations = []
            
            if recipe['HSI'] > 70:
                explanations.append("üçé <strong>Eg√©szs√©ges:</strong> Magas t√°p√©rt√©k≈± √∂sszetev≈ëk, kiegyens√∫lyozott makrot√°panyagok")
            
            if recipe['ESI'] > 70:
                explanations.append("üå± <strong>K√∂rnyezetbar√°t:</strong> Alacsony sz√©n-l√°bnyom, helyi alapanyagok el≈ënyben r√©szes√≠t√©se")
            
            if recipe['PPI'] > 80:
                explanations.append("‚≠ê <strong>N√©pszer≈±:</strong> Sokan kedvelik √©s gyakran elk√©sz√≠tik")
            
            if recipe['composite_score'] > 75:
                explanations.append("üéØ <strong>Kiv√°l√≥ v√°laszt√°s:</strong> A h√°rom szempont alapj√°n optim√°lis recept")
            
            if not explanations:
                explanations.append("üìä Kiegyens√∫lyozott recept minden szempontb√≥l")
            
            return "<br>".join(explanations)
        
        return ""

# Global objektumok inicializ√°l√°sa
db = DatabaseManager()
recommender = EnhancedRecipeRecommender()

def get_user_version():
    """Felhaszn√°l√≥ verzi√≥j√°nak meghat√°roz√°sa"""
    if 'version' not in session:
        versions = ['v1', 'v2', 'v3']
        session['version'] = random.choice(versions)
    return session['version']

# TELJES ROUTE LISTA - MINDEN HI√ÅNYZ√ì ROUTE P√ìTL√ÅSA

@user_study_bp.route('/')
def welcome():
    """√údv√∂zl≈ë oldal"""
    return render_template('user_study/welcome.html')

@user_study_bp.route('/register', methods=['GET', 'POST'])
def register():
    """Felhaszn√°l√≥ regisztr√°ci√≥"""
    if request.method == 'POST':
        try:
            age_group = request.form.get('age_group')
            education = request.form.get('education')
            cooking_frequency = request.form.get('cooking_frequency')
            sustainability_awareness = int(request.form.get('sustainability_awareness', 3))
            
            # Consent mez≈ëk
            consent_participation = bool(request.form.get('consent_participation'))
            consent_data = bool(request.form.get('consent_data'))
            consent_publication = bool(request.form.get('consent_publication'))
            consent_contact = bool(request.form.get('consent_contact'))
            
            # Valid√°ci√≥
            if not all([age_group, education, cooking_frequency]):
                return render_template('user_study/register.html', 
                                     error='K√©rj√ºk t√∂ltse ki az √∂sszes k√∂telez≈ë mez≈ët.')
            
            if not all([consent_participation, consent_data, consent_publication]):
                return render_template('user_study/register.html', 
                                     error='A k√∂telez≈ë beleegyez√©sek sz√ºks√©gesek a folytat√°shoz.')
            
            # Verzi√≥ hozz√°rendel√©se
            version = get_user_version()
            
            # Felhaszn√°l√≥ ment√©se adatb√°zisba
            conn = db.get_connection()
            cursor = conn.execute('''
                INSERT INTO participants 
                (age_group, education, cooking_frequency, sustainability_awareness,
                 consent_participation, consent_data, consent_publication, consent_contact, version)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (age_group, education, cooking_frequency, sustainability_awareness,
                  consent_participation, consent_data, consent_publication, consent_contact, version))
            
            user_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            # Session be√°ll√≠t√°sa
            session['user_id'] = user_id
            session['version'] = version
            session['registration_time'] = datetime.datetime.now().isoformat()
            
            print(f"‚úÖ User registered successfully: ID={user_id}, Version={version}")
            
            return redirect(url_for('user_study.instructions'))
            
        except Exception as e:
            print(f"Registration error: {e}")
            return render_template('user_study/register.html', 
                                 error='Regisztr√°ci√≥ sikertelen. K√©rj√ºk pr√≥b√°lja √∫jra.')
    
    return render_template('user_study/register.html')

@user_study_bp.route('/instructions')
def instructions():
    """Instrukci√≥k oldal"""
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    return render_template('user_study/instructions_hidden.html')

@user_study_bp.route('/study')
def study():
    """F≈ë tanulm√°ny oldal"""
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    user_id = session['user_id']
    version = get_user_version()
    
    # Aj√°nl√°sok lek√©r√©se
    recommendations = recommender.get_recommendations(user_id, version)
    
    print(f"‚úÖ Study loaded for user {user_id}, version {version}, {len(recommendations)} recommendations")
    
    return render_template('user_study/study_enhanced.html', 
                         recommendations=recommendations)

@user_study_bp.route('/rate_recipe', methods=['POST'])
def rate_recipe():
    """Recept √©rt√©kel√©se"""
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    
    try:
        user_id = session['user_id']
        recipe_id = int(request.json.get('recipe_id'))
        rating = int(request.json.get('rating'))
        explanation_helpful = request.json.get('explanation_helpful')
        view_time = request.json.get('view_time_seconds', 0)
        interaction_order = request.json.get('interaction_order', 0)
        
        # √ârt√©kel√©s ment√©se
        db.log_interaction(user_id, recipe_id, rating=rating,
                          explanation_helpful=explanation_helpful,
                          view_time=view_time,
                          interaction_order=interaction_order)
        
        print(f"‚úÖ Recipe rated: User={user_id}, Recipe={recipe_id}, Rating={rating}")
        
        return jsonify({'status': 'success'})
        
    except Exception as e:
        print(f"Rating error: {e}")
        return jsonify({'error': str(e)}), 500

@user_study_bp.route('/questionnaire', methods=['GET', 'POST'])
def questionnaire():
    """Z√°r√≥ k√©rd≈ë√≠v"""
    if 'user_id' not in session:
        return redirect(url_for('user_study.register'))
    
    version = get_user_version()
    
    if request.method == 'POST':
        try:
            user_id = session['user_id']
            
            # V√°laszok gy≈±jt√©se
            system_usability = int(request.form.get('system_usability'))
            recommendation_quality = int(request.form.get('recommendation_quality'))
            trust_level = int(request.form.get('trust_level'))
            explanation_clarity = request.form.get('explanation_clarity')
            sustainability_importance = int(request.form.get('sustainability_importance'))
            overall_satisfaction = int(request.form.get('overall_satisfaction'))
            additional_comments = request.form.get('additional_comments', '')
            
            # explanation_clarity kezel√©se (v1-n√©l nincs)
            explanation_clarity_int = int(explanation_clarity) if explanation_clarity else None
            
            # V√°laszok ment√©se
            conn = db.get_connection()
            conn.execute('''
                INSERT INTO questionnaire 
                (user_id, system_usability, recommendation_quality, trust_level, 
                 explanation_clarity, sustainability_importance, overall_satisfaction, additional_comments)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, system_usability, recommendation_quality, trust_level,
                  explanation_clarity_int, sustainability_importance, overall_satisfaction, additional_comments))
            
            # Befejez√©s jel√∂l√©se
            conn.execute('''
                UPDATE participants SET is_completed = 1 WHERE user_id = ?
            ''', (user_id,))
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ Questionnaire completed for user {user_id}")
            
            return redirect(url_for('user_study.thank_you'))
            
        except Exception as e:
            print(f"Questionnaire error: {e}")
            return render_template('user_study/questionnaire.html', 
                                 version=version,
                                 error='K√©rd≈ë√≠v ment√©se sikertelen. K√©rj√ºk pr√≥b√°lja √∫jra.')
    
    return render_template('user_study/questionnaire.html', version=version)

@user_study_bp.route('/thank_you')
def thank_you():
    """K√∂sz√∂net oldal"""
    version = get_user_version()
    return render_template('user_study/thank_you.html', version=version)

@user_study_bp.route('/admin/stats')
def admin_stats():
    """Val√≥s idej≈± admin statisztik√°k"""
    try:
        conn = db.get_connection()
        
        # Alapstatisztik√°k
        stats = {}
        
        # √ñsszes r√©sztvev≈ë
        total_participants = conn.execute('SELECT COUNT(*) as count FROM participants').fetchone()['count']
        stats['total_participants'] = total_participants
        
        # Befejezett r√©sztvev≈ëk
        completed_participants = conn.execute(
            'SELECT COUNT(*) as count FROM participants WHERE is_completed = 1'
        ).fetchone()['count']
        stats['completed_participants'] = completed_participants
        
        # Befejez√©si ar√°ny
        stats['completion_rate'] = completed_participants / total_participants if total_participants > 0 else 0
        
        # Verzi√≥ eloszl√°s
        version_distribution = []
        version_data = conn.execute('''
            SELECT version, 
                   COUNT(*) as count,
                   SUM(CASE WHEN is_completed = 1 THEN 1 ELSE 0 END) as completed
            FROM participants 
            GROUP BY version
        ''').fetchall()
        
        for row in version_data:
            version_distribution.append({
                'version': row['version'],
                'count': row['count'],
                'completed': row['completed']
            })
        
        stats['version_distribution'] = version_distribution
        
        # √Åtlagos √©rt√©kel√©sek
        rating_data = conn.execute('''
            SELECT p.version, AVG(i.rating) as avg_rating, COUNT(*) as count
            FROM interactions i
            JOIN participants p ON i.user_id = p.user_id
            WHERE i.rating IS NOT NULL
            GROUP BY p.version
        ''').fetchall()
        
        average_ratings = []
        for row in rating_data:
            average_ratings.append({
                'version': row['version'],
                'avg_rating': row['avg_rating'],
                'count': row['count']
            })
        
        stats['average_ratings'] = average_ratings
        
        # K√©rd≈ë√≠v eredm√©nyek
        questionnaire_data = conn.execute('''
            SELECT p.version,
                   AVG(q.system_usability) as avg_usability,
                   AVG(q.recommendation_quality) as avg_quality,
                   AVG(q.trust_level) as avg_trust,
                   AVG(q.explanation_clarity) as avg_clarity,
                   AVG(q.overall_satisfaction) as avg_satisfaction
            FROM questionnaire q
            JOIN participants p ON q.user_id = p.user_id
            GROUP BY p.version
        ''').fetchall()
        
        questionnaire_results = []
        for row in questionnaire_data:
            questionnaire_results.append({
                'version': row['version'],
                'avg_usability': row['avg_usability'],
                'avg_quality': row['avg_quality'],
                'avg_trust': row['avg_trust'],
                'avg_clarity': row['avg_clarity'],
                'avg_satisfaction': row['avg_satisfaction']
            })
        
        stats['questionnaire_results'] = questionnaire_results
        
        # √Åtlagos interakci√≥k/felhaszn√°l√≥
        total_interactions = conn.execute('SELECT COUNT(*) as count FROM interactions').fetchone()['count']
        stats['avg_interactions_per_user'] = total_interactions / total_participants if total_participants > 0 else 0
        
        conn.close()
        
        return render_template('user_study/admin_stats.html', stats=stats)
        
    except Exception as e:
        return f"Stats error: {e}", 500

# Blueprint export√°l√°sa
__all__ = ['user_study_bp']
