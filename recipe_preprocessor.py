#!/usr/bin/env python3
"""
Magyar receptek adatfeldolgoz√°sa √©s normaliz√°l√°sa
Val√≥s hungarian_recipes_github.csv integr√°l√°sa a user study rendszerbe
"""

import pandas as pd
import numpy as np
from pathlib import Path
import os
import sys

class HungarianRecipeProcessor:
    """Magyar receptek feldolgoz√°sa √©s normaliz√°l√°sa"""
    
    def __init__(self, csv_file_path="hungarian_recipes_github.csv"):
        self.csv_path = csv_file_path
        self.processed_data = None
        
    def load_and_validate_data(self):
        """CSV bet√∂lt√©se √©s valid√°l√°sa"""
        try:
            print(f"üìä Bet√∂lt√©s: {self.csv_path}")
            df = pd.read_csv(self.csv_path, encoding='utf-8')
            
            print(f"‚úÖ Sikeresen bet√∂ltve: {len(df)} recept")
            print(f"üìã Oszlopok: {list(df.columns)}")
            
            # K√∂telez≈ë oszlopok ellen≈ërz√©se
            required_columns = ['name', 'ingredients', 'instructions', 'images', 
                              'env_score', 'nutri_score', 'meal_score']
            
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                print(f"‚ö†Ô∏è Hi√°nyz√≥ oszlopok: {missing_columns}")
                return None
            
            return df
            
        except FileNotFoundError:
            print(f"‚ùå F√°jl nem tal√°lhat√≥: {self.csv_path}")
            return None
        except Exception as e:
            print(f"‚ùå Hiba a bet√∂lt√©s sor√°n: {e}")
            return None
    
    def normalize_env_score(self, df):
        """
        K√∂rnyezeti pontsz√°m normaliz√°l√°sa 0-100 sk√°l√°ra
        Magasabb env_score = nagyobb k√∂rnyezeti terhel√©s ‚Üí alacsonyabb normaliz√°lt √©rt√©k
        """
        print("üå± K√∂rnyezeti pontsz√°mok normaliz√°l√°sa...")
        
        # Eredeti tartom√°ny
        env_min = df['env_score'].min()
        env_max = df['env_score'].max()
        print(f"   Eredeti env_score tartom√°ny: {env_min:.2f} - {env_max:.2f}")
        
        # Min-Max normaliz√°l√°s 0-100-ra, majd invert√°l√°s
        # Magas eredeti √©rt√©k ‚Üí alacsony normaliz√°lt √©rt√©k (rossz k√∂rnyezetileg)
        df['env_score_normalized'] = 100 - ((df['env_score'] - env_min) / (env_max - env_min)) * 100
        
        # Ellen≈ërz√©s
        norm_min = df['env_score_normalized'].min()
        norm_max = df['env_score_normalized'].max()
        print(f"   Normaliz√°lt env_score tartom√°ny: {norm_min:.2f} - {norm_max:.2f}")
        
        return df
    
    def calculate_composite_score(self, df):
        """
        Kompozit pontsz√°m sz√°m√≠t√°sa
        comp_score = env_score_normalized * 0.4 + nutri_score * 0.4 + meal_score * 0.2
        """
        print("üî¢ Kompozit pontsz√°m sz√°m√≠t√°sa...")
        
        # S√∫lyok
        env_weight = 0.4
        nutri_weight = 0.4
        meal_weight = 0.2
        
        df['comp_score'] = (
            df['env_score_normalized'] * env_weight +
            df['nutri_score'] * nutri_weight +
            df['meal_score'] * meal_weight
        )
        
        # Statisztik√°k
        comp_min = df['comp_score'].min()
        comp_max = df['comp_score'].max()
        comp_mean = df['comp_score'].mean()
        
        print(f"   Kompozit score tartom√°ny: {comp_min:.2f} - {comp_max:.2f}")
        print(f"   √Åtlagos kompozit score: {comp_mean:.2f}")
        
        return df
    
    def clean_and_prepare_data(self, df):
        """Adatok tiszt√≠t√°sa √©s el≈ëk√©sz√≠t√©se a user study-hoz"""
        print("üßπ Adatok tiszt√≠t√°sa...")
        
        # Hi√°nyz√≥ √©rt√©kek kezel√©se
        df = df.dropna(subset=['name', 'ingredients'])
        
        # √úres k√©pek helyettes√≠t√©se placeholder-rel
        df['images'] = df['images'].fillna('/static/images/recipe_placeholder.jpg')
        
        # √úres instrukci√≥k helyettes√≠t√©se
        df['instructions'] = df['instructions'].fillna('R√©szletes elk√©sz√≠t√©si √∫tmutat√≥ hamarosan.')
        
        # Sz√∂veges mez≈ëk tiszt√≠t√°sa
        df['name'] = df['name'].str.strip()
        df['ingredients'] = df['ingredients'].str.strip()
        df['instructions'] = df['instructions'].str.strip()
        
        # User study kompatibilis oszlopnevekkel
        df_clean = df.rename(columns={
            'name': 'title',
            'env_score_normalized': 'ESI',  # Environmental Score Index
            'nutri_score': 'HSI',           # Health Score Index  
            'meal_score': 'PPI',            # Popularity/Preference Index
            'comp_score': 'composite_score'
        })
        
        # Recipe ID hozz√°ad√°sa
        df_clean['recipeid'] = range(1, len(df_clean) + 1)
        
        # √ñsszetev≈ëk r√∂vid√≠t√©se ha t√∫l hossz√∫ (UI miatt)
        df_clean['ingredients_short'] = df_clean['ingredients'].apply(
            lambda x: x[:200] + '...' if len(str(x)) > 200 else x
        )
        
        print(f"‚úÖ Tiszt√≠tva: {len(df_clean)} recept k√©szenl√©tben")
        
        return df_clean
    
    def create_sample_for_user_study(self, df, sample_size=50):
        """
        Reprezentat√≠v minta l√©trehoz√°sa a user study-hoz
        K√ºl√∂nb√∂z≈ë score tartom√°nyokb√≥l egyenletesen
        """
        print(f"üéØ User study minta l√©trehoz√°sa ({sample_size} recept)...")
        
        # Stratified sampling kompozit score alapj√°n
        df['score_quartile'] = pd.qcut(df['composite_score'], q=4, labels=['low', 'medium', 'high', 'very_high'])
        
        # Egyenletes eloszl√°s a kvartilisek k√∂z√∂tt
        samples_per_quartile = sample_size // 4
        remainder = sample_size % 4
        
        sample_dfs = []
        for i, quartile in enumerate(['low', 'medium', 'high', 'very_high']):
            quartile_df = df[df['score_quartile'] == quartile]
            
            # Marad√©k az els≈ë kvartilis√©hez
            n_samples = samples_per_quartile + (remainder if i == 0 else 0)
            
            if len(quartile_df) >= n_samples:
                sample = quartile_df.sample(n=n_samples, random_state=42)
            else:
                sample = quartile_df  # Ha kevesebb van, mind
            
            sample_dfs.append(sample)
            print(f"   {quartile}: {len(sample)} recept")
        
        user_study_sample = pd.concat(sample_dfs, ignore_index=True)
        
        # Keverj√ºk meg
        user_study_sample = user_study_sample.sample(frac=1, random_state=42).reset_index(drop=True)
        
        # Recipe ID √∫jrasz√°moz√°sa
        user_study_sample['recipeid'] = range(1, len(user_study_sample) + 1)
        
        print(f"‚úÖ User study minta k√©sz: {len(user_study_sample)} recept")
        
        return user_study_sample
    
    def generate_statistics_report(self, df):
        """Statisztikai riport az adatokr√≥l"""
        print("\nüìä ADATSTATISZTIK√ÅK")
        print("=" * 50)
        
        print(f"üìà Receptek sz√°ma: {len(df)}")
        print(f"üìã Oszlopok: {len(df.columns)}")
        
        # Score statisztik√°k
        for score_col in ['HSI', 'ESI', 'PPI', 'composite_score']:
            if score_col in df.columns:
                mean_val = df[score_col].mean()
                std_val = df[score_col].std()
                min_val = df[score_col].min()
                max_val = df[score_col].max()
                
                print(f"\n{score_col}:")
                print(f"   √Åtlag: {mean_val:.2f} ¬± {std_val:.2f}")
                print(f"   Tartom√°ny: {min_val:.2f} - {max_val:.2f}")
        
        # Top 5 recept kompozit score alapj√°n
        if 'composite_score' in df.columns:
            print(f"\nüèÜ TOP 5 RECEPT (kompozit score):")
            top_recipes = df.nlargest(5, 'composite_score')[['title', 'composite_score', 'HSI', 'ESI', 'PPI']]
            for idx, row in top_recipes.iterrows():
                print(f"   {row['title'][:40]:<40} | Score: {row['composite_score']:.1f}")
        
        # Adatmin≈ës√©g ellen≈ërz√©s
        print(f"\nüîç ADATMIN≈êS√âG:")
        print(f"   Hi√°nyz√≥ c√≠mek: {df['title'].isna().sum()}")
        print(f"   Hi√°nyz√≥ √∂sszetev≈ëk: {df['ingredients'].isna().sum()}")
        print(f"   Hi√°nyz√≥ instrukci√≥k: {df['instructions'].isna().sum()}")
        print(f"   Hi√°nyz√≥ k√©pek: {df['images'].isna().sum()}")
    
    def process_all(self, output_path="data/processed_recipes.csv", sample_size=50):
        """Teljes feldolgoz√°si pipeline"""
        print("üöÄ MAGYAR RECEPTEK FELDOLGOZ√ÅSA")
        print("=" * 50)
        
        # 1. Bet√∂lt√©s
        df = self.load_and_validate_data()
        if df is None:
            return False
        
        # 2. Normaliz√°l√°s
        df = self.normalize_env_score(df)
        
        # 3. Kompozit score
        df = self.calculate_composite_score(df)
        
        # 4. Tiszt√≠t√°s
        df = self.clean_and_prepare_data(df)
        
        # 5. User study minta
        if sample_size > 0:
            df_sample = self.create_sample_for_user_study(df, sample_size)
            self.processed_data = df_sample
        else:
            self.processed_data = df
        
        # 6. Statisztik√°k
        self.generate_statistics_report(self.processed_data)
        
        # 7. Ment√©s
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        self.processed_data.to_csv(output_path, index=False, encoding='utf-8')
        
        print(f"\nüíæ Feldolgozott adatok mentve: {output_path}")
        print(f"üìÅ F√°jlm√©ret: {os.path.getsize(output_path) / 1024:.1f} KB")
        
        return True

def main():
    """F≈ë feldolgoz√°si script"""
    processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
    
    # Teljes feldolgoz√°s 50 recepttel a user study-hoz
    success = processor.process_all(
        output_path="data/processed_recipes.csv",
        sample_size=50  # Optim√°lis m√©ret a user study-hoz
    )
    
    if success:
        print("\nüéâ FELDOLGOZ√ÅS SIKERES!")
        print("\nüìã K√∂vetkez≈ë l√©p√©sek:")
        print("1. T√∂ltsd fel a 'hungarian_recipes_github.csv' f√°jlt a GitHub repository-ba")
        print("2. Futtasd ezt a scriptet a setup_database.py-ban")
        print("3. A user study automatikusan haszn√°lni fogja a val√≥s recepteket")
        print("4. Precision/Recall/F1 metrik√°k sz√°m√≠t√°sa implement√°l√°sra ker√ºl")
    else:
        print("\n‚ùå FELDOLGOZ√ÅS SIKERTELEN!")
        print("Ellen≈ërizd a 'hungarian_recipes_github.csv' f√°jl el√©rhet≈ës√©g√©t.")

if __name__ == "__main__":
    main()
