#!/usr/bin/env python3
"""
GYORS FIX - setup_database.py
Jav√≠tja a deployment probl√©m√°kat
"""

import os
import sys
import sqlite3
from pathlib import Path
import pandas as pd

def test_database():
    """Adatb√°zis tesztel√©se"""
    print("üîß Adatb√°zis tesztel√©se...")
    
    try:
        conn = sqlite3.connect('user_study.db')
        
        # T√°bl√°k ellen≈ërz√©se
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        expected_tables = ['participants', 'interactions', 'questionnaire']
        missing_tables = [table for table in expected_tables if table not in tables]
        
        if missing_tables:
            print(f"‚ùå Hi√°nyz√≥ t√°bl√°k: {missing_tables}")
            return False
        
        # Test insert
        cursor.execute('''
            INSERT INTO participants 
            (age_group, education, cooking_frequency, sustainability_awareness, version)
            VALUES (?, ?, ?, ?, ?)
        ''', ('25-34', 'bachelor', 'weekly', 3, 'v1'))
        
        user_id = cursor.lastrowid
        conn.commit()
        
        # Test query
        cursor.execute('SELECT COUNT(*) FROM participants')
        count = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"‚úÖ Adatb√°zis teszt sikeres (user_id: {user_id}, count: {count})")
        return True
        
    except Exception as e:
        print(f"‚ùå Adatb√°zis teszt hiba: {e}")
        return False

def main():
    """F≈ë setup script"""
    print("üöÄ GYORS FIX SETUP")
    print("=" * 30)
    
    success = True
    
    # 1. K√∂nyvt√°rak
    success &= create_directories()
    
    # 2. Sample receptek
    success &= create_sample_recipes()
    
    # 3. Adatb√°zis s√©ma jav√≠t√°sa
    success &= fix_database_schema()
    
    # 4. Adatb√°zis tesztel√©se
    success &= test_database()
    
    print("\n" + "=" * 30)
    if success:
        print("üéâ SETUP SIKERES!")
        print("\nüìã ELLEN≈êRZ√âS:")
        print(f"‚úÖ Data k√∂nyvt√°r: {os.path.exists('data')}")
        print(f"‚úÖ Processed recipes: {os.path.exists('data/processed_recipes.csv')}")
        print(f"‚úÖ Database: {os.path.exists('user_study.db')}")
        
        # CSV tartalom ellen≈ërz√©se
        if os.path.exists('data/processed_recipes.csv'):
            df = pd.read_csv('data/processed_recipes.csv')
            print(f"‚úÖ Receptek sz√°ma: {len(df)}")
            print(f"‚úÖ Oszlopok: {list(df.columns)}")
        
        print("\nüöÄ K√ñVETKEZ≈ê L√âP√âSEK:")
        print("1. Git commit √©s push a jav√≠t√°sokkal")
        print("2. Heroku automatikusan redeploy-ol")
        print("3. Tesztelje a regisztr√°ci√≥t")
        
    else:
        print("‚ùå SETUP SIKERTELEN!")
        print("Ellen≈ërizze a hib√°kat √©s pr√≥b√°lja √∫jra.")
    
    return success

if __name__ == "__main__":
    main() create_sample_recipes():
    """Gyors sample receptek l√©trehoz√°sa"""
    print("üîß Sample receptek l√©trehoz√°sa...")
    
    # Magyar receptek
    recipes_data = [
        {
            'recipeid': 1,
            'title': 'Hagyom√°nyos Guly√°sleves',
            'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
            'instructions': '1. A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. 2. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. 3. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. 4. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
            'images': '',
            'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
        },
        {
            'recipeid': 2,
            'title': 'Veget√°ri√°nus Lecs√≥',
            'ingredients': 'paprika, paradicsom, hagyma, toj√°s, kolb√°sz helyett tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
            'instructions': '1. A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. 2. Hozz√°adjuk a felszeletelt paprik√°t. 3. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. 4. Toj√°ssal d√∫s√≠tjuk.',
            'images': '',
            'HSI': 85.0, 'ESI': 90.0, 'PPI': 70.0, 'composite_score': 83.0
        },
        {
            'recipeid': 3,
            'title': 'R√°ntott Schnitzel Burgony√°val',
            'ingredients': 'sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors',
            'instructions': '1. A h√∫st kikalap√°ljuk √©s megs√≥zzuk. 2. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. 3. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. 4. A burgony√°t h√©j√°ban megf≈ëzz√ºk.',
            'images': '',
            'HSI': 55.0, 'ESI': 45.0, 'PPI': 85.0, 'composite_score': 57.0
        },
        {
            'recipeid': 4,
            'title': 'Hal√°szl√© Szegedi M√≥dra',
            'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
            'instructions': '1. A halakat megtiszt√≠tjuk √©s feldaraboljuk. 2. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. 3. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. 4. Paprik√°val √≠zes√≠tj√ºk.',
            'images': '',
            'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
        },
        {
            'recipeid': 5,
            'title': 'Gombapaprik√°s Galusk√°val',
            'ingredients': 'gomba, hagyma, paprika, tejf√∂l, liszt, toj√°s, petrezselyem, olaj',
            'instructions': '1. A gomb√°t felszeletelj√ºk √©s kis√ºtj√ºk. 2. Hagym√°t dinsztel√ºnk, paprik√°t adunk hozz√°. 3. A gomb√°t hozz√°adjuk, tejf√∂llel lefuttatjuk. 4. Galusk√°t f≈ëz√ºnk mell√©.',
            'images': '',
            'HSI': 70.0, 'ESI': 75.0, 'PPI': 65.0, 'composite_score': 71.5
        }
    ]
    
    # Data k√∂nyvt√°r l√©trehoz√°sa
    os.makedirs('data', exist_ok=True)
    
    # CSV ment√©se
    df = pd.DataFrame(recipes_data)
    df.to_csv('data/processed_recipes.csv', index=False, encoding='utf-8')
    
    print(f"‚úÖ {len(recipes_data)} recept l√©trehozva: data/processed_recipes.csv")
    return True

def fix_database_schema():
    """Adatb√°zis s√©ma jav√≠t√°sa"""
    print("üîß Adatb√°zis s√©ma jav√≠t√°sa...")
    
    # SQLite adatb√°zis l√©trehoz√°sa
    conn = sqlite3.connect('user_study.db')
    
    # T√°bl√°k t√∂rl√©se ha l√©teznek
    conn.execute('DROP TABLE IF EXISTS interactions')
    conn.execute('DROP TABLE IF EXISTS questionnaire') 
    conn.execute('DROP TABLE IF EXISTS participants')
    conn.execute('DROP TABLE IF EXISTS users')  # R√©gi t√°bla
    
    # JAV√çTOTT participants t√°bla
    conn.execute('''
        CREATE TABLE participants (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            age_group TEXT NOT NULL,
            education TEXT NOT NULL,
            cooking_frequency TEXT NOT NULL,
            sustainability_awareness INTEGER NOT NULL,
            consent_participation BOOLEAN NOT NULL DEFAULT 1,
            consent_data BOOLEAN NOT NULL DEFAULT 1,
            consent_publication BOOLEAN NOT NULL DEFAULT 1,
            consent_contact BOOLEAN DEFAULT 0,
            version TEXT NOT NULL,
            is_completed BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Interactions t√°bla
    conn.execute('''
        CREATE TABLE interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            recipe_id INTEGER,
            rating INTEGER,
            explanation_helpful INTEGER,
            view_time_seconds REAL,
            interaction_order INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES participants (user_id)
        )
    ''')
    
    # Questionnaire t√°bla
    conn.execute('''
        CREATE TABLE questionnaire (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            system_usability INTEGER,
            recommendation_quality INTEGER,
            trust_level INTEGER,
            explanation_clarity INTEGER,
            sustainability_importance INTEGER,
            overall_satisfaction INTEGER,
            additional_comments TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES participants (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()
    
    print("‚úÖ Adatb√°zis s√©ma jav√≠tva")
    return True

def create_directories():
    """Sz√ºks√©ges k√∂nyvt√°rak l√©trehoz√°sa"""
    print("üîß K√∂nyvt√°rak l√©trehoz√°sa...")
    
    directories = [
        'data',
        'static',
        'static/images',
        'user_study',
        'user_study/templates',
        'user_study/templates/user_study',
        'results'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ K√∂nyvt√°rak l√©trehozva")
    return True

def
