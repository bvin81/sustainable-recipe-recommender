#!/usr/bin/env python3
"""
VAL√ìS MAGYAR RECEPTEKKEL - setup_database.py
Haszn√°lja a hungarian_recipes_github.csv √©s recipe_preprocessor.py f√°jlokat
"""

import os
import sys
import sqlite3
from pathlib import Path

def create_directories():
    """Sz√ºks√©ges k√∂nyvt√°rak l√©trehoz√°sa"""
    print("üìÅ K√∂nyvt√°rak l√©trehoz√°sa...")
    
    directories = [
        'data',
        'static',
        'static/images',
        'user_study',
        'user_study/templates',
        'user_study/templates/user_study',
        'results'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    
    print("‚úÖ K√∂nyvt√°rak l√©trehozva")

def process_hungarian_recipes():
    """VAL√ìS magyar receptek feldolgoz√°sa"""
    try:
        print("üá≠üá∫ VAL√ìS magyar receptek feldolgoz√°sa...")
        
        # recipe_preprocessor.py import√°l√°sa
        from recipe_preprocessor import HungarianRecipeProcessor
        
        # hungarian_recipes_github.csv feldolgoz√°sa
        processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
        
        success = processor.process_all(
            output_path="data/processed_recipes.csv",
            sample_size=50  # 50 recept a user study-hoz
        )
        
        if success:
            print("‚úÖ VAL√ìS magyar receptek sikeresen feldolgozva!")
            
            # Ellen≈ërizz√ºk az eredm√©nyt
            import pandas as pd
            df = pd.read_csv("data/processed_recipes.csv")
            print(f"üìä Feldolgozott receptek: {len(df)} darab")
            print(f"üçΩÔ∏è Minta receptek:")
            for i in range(min(3, len(df))):
                print(f"   {i+1}. {df.iloc[i]['title']}")
            
            return True
        else:
            print("‚ö†Ô∏è Val√≥s receptek feldolgoz√°sa sikertelen, sample adatok haszn√°lata")
            return create_sample_data()
            
    except ImportError as e:
        print(f"‚ö†Ô∏è recipe_preprocessor.py import hiba: {e}")
        return create_sample_data()
    except FileNotFoundError as e:
        print(f"‚ö†Ô∏è hungarian_recipes_github.csv nem tal√°lhat√≥: {e}")
        return create_sample_data()
    except Exception as e:
        print(f"‚ö†Ô∏è Receptek feldolgoz√°si hiba: {e}")
        return create_sample_data()

def create_sample_data():
    """Fallback: Sample dataset l√©trehoz√°sa ha nincs val√≥s adat"""
    print("üîß Fallback: Sample dataset l√©trehoz√°sa...")
    
    import pandas as pd
    
    # Magyar mintareceptek
    recipes_data = [
        {
            'recipeid': 1,
            'title': 'Hagyom√°nyos Guly√°sleves',
            'ingredients': 'marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna',
            'instructions': '1. A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. 2. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. 3. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. 4. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.',
            'images': '',
            'HSI': 75.0, 'ESI': 60.0, 'PPI': 90.0, 'composite_score': 71.0
        },
        {
            'recipeid': 2,
            'title': 'Veget√°ri√°nus Lecs√≥',
            'ingredients': 'paprika, paradicsom, hagyma, toj√°s, kolb√°sz helyett tofu, ol√≠vaolaj, s√≥, bors, fokhagyma',
            'instructions': '1. A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. 2. Hozz√°adjuk a felszeletelt paprik√°t. 3. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. 4. Toj√°ssal d√∫s√≠tj√ºk.',
            'images': '',
            'HSI': 85.0, 'ESI': 90.0, 'PPI': 70.0, 'composite_score': 83.0
        },
        {
            'recipeid': 3,
            'title': 'R√°ntott Schnitzel Burgony√°val',
            'ingredients': 'sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors',
            'instructions': '1. A h√∫st kikalap√°ljuk √©s megs√≥zzuk. 2. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. 3. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. 4. A burgony√°t h√©j√°ban megf≈ëzz√ºk.',
            'images': '',
            'HSI': 55.0, 'ESI': 45.0, 'PPI': 85.0, 'composite_score': 57.0
        },
        {
            'recipeid': 4,
            'title': 'Hal√°szl√© Szegedi M√≥dra',
            'ingredients': 'ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l',
            'instructions': '1. A halakat megtiszt√≠tjuk √©s feldaraboljuk. 2. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. 3. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. 4. Paprik√°val √≠zes√≠tj√ºk.',
            'images': '',
            'HSI': 80.0, 'ESI': 70.0, 'PPI': 75.0, 'composite_score': 74.0
        },
        {
            'recipeid': 5,
            'title': 'Gombapaprik√°s Galusk√°val',
            'ingredients': 'gomba, hagyma, paprika, tejf√∂l, liszt, toj√°s, petrezselyem, olaj',
            'instructions': '1. A gomb√°t felszeletelj√ºk √©s kis√ºtj√ºk. 2. Hagym√°t dinsztel√ºnk, paprik√°t adunk hozz√°. 3. A gomb√°t hozz√°adjuk, tejf√∂llel lefuttatjuk. 4. Galusk√°t f≈ëz√ºnk mell√©.',
            'images': '',
            'HSI': 70.0, 'ESI': 75.0, 'PPI': 65.0, 'composite_score': 71.5
        }
    ]
    
    df = pd.DataFrame(recipes_data)
    os.makedirs('data', exist_ok=True)
    df.to_csv('data/processed_recipes.csv', index=False, encoding='utf-8')
    
    print(f"‚úÖ Fallback sample dataset: {len(recipes_data)} recept")
    return True

def fix_database_schema():
    """Adatb√°zis s√©ma jav√≠t√°sa"""
    print("üîß Adatb√°zis s√©ma jav√≠t√°sa...")
    
    # SQLite adatb√°zis l√©trehoz√°sa
    conn = sqlite3.connect('user_study.db')
    
    # T√°bl√°k t√∂rl√©se ha l√©teznek
    conn.execute('DROP TABLE IF EXISTS interactions')
    conn.execute('DROP TABLE IF EXISTS questionnaire') 
    conn.execute('DROP TABLE IF EXISTS participants')
    conn.execute('DROP TABLE IF EXISTS users')  # R√©gi t√°bla
    
    # JAV√çTOTT participants t√°bla - register.html-lel szinkronban
    conn.execute('''
        CREATE TABLE participants (
            user_id INTEGER PRIMARY KEY AUTOINCREMENT,
            age_group TEXT NOT NULL,
            education TEXT NOT NULL,
            cooking_frequency TEXT NOT NULL,
            sustainability_awareness INTEGER NOT NULL,
            consent_participation BOOLEAN NOT NULL DEFAULT 1,
            consent_data BOOLEAN NOT NULL DEFAULT 1,
            consent_publication BOOLEAN NOT NULL DEFAULT 1,
            consent_contact BOOLEAN DEFAULT 0,
            version TEXT NOT NULL,
            is_completed BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Interactions t√°bla
    conn.execute('''
        CREATE TABLE interactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            recipe_id INTEGER,
            rating INTEGER,
            explanation_helpful INTEGER,
            view_time_seconds REAL,
            interaction_order INTEGER,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES participants (user_id)
        )
    ''')
    
    # Questionnaire t√°bla
    conn.execute('''
        CREATE TABLE questionnaire (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            system_usability INTEGER,
            recommendation_quality INTEGER,
            trust_level INTEGER,
            explanation_clarity INTEGER,
            sustainability_importance INTEGER,
            overall_satisfaction INTEGER,
            additional_comments TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES participants (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()
    
    print("‚úÖ Adatb√°zis s√©ma jav√≠tva")
    return True

def test_setup():
    """Setup tesztel√©se"""
    print("üß™ Setup tesztel√©se...")
    
    success = True
    
    # 1. CSV f√°jl ellen≈ërz√©se
    if os.path.exists('data/processed_recipes.csv'):
        try:
            import pandas as pd
            df = pd.read_csv('data/processed_recipes.csv')
            required_columns = ['recipeid', 'title', 'ingredients', 'HSI', 'ESI', 'PPI', 'composite_score']
            missing_cols = [col for col in required_columns if col not in df.columns]
            
            if missing_cols:
                print(f"‚ùå Hi√°nyz√≥ oszlopok: {missing_cols}")
                success = False
            else:
                print(f"‚úÖ CSV: {len(df)} recept, minden oszlop OK")
        except Exception as e:
            print(f"‚ùå CSV olvas√°si hiba: {e}")
            success = False
    else:
        print("‚ùå processed_recipes.csv nem tal√°lhat√≥")
        success = False
    
    # 2. Adatb√°zis teszt
    try:
        conn = sqlite3.connect('user_study.db')
        cursor = conn.cursor()
        
        # Test insert
        cursor.execute('''
            INSERT INTO participants 
            (age_group, education, cooking_frequency, sustainability_awareness, version)
            VALUES (?, ?, ?, ?, ?)
        ''', ('25-34', 'bachelor', 'weekly', 3, 'v1'))
        
        user_id = cursor.lastrowid
        conn.commit()
        
        # Test query
        cursor.execute('SELECT COUNT(*) FROM participants')
        count = cursor.fetchone()[0]
        
        conn.close()
        
        print(f"‚úÖ Adatb√°zis teszt sikeres (user_id: {user_id}, count: {count})")
        
    except Exception as e:
        print(f"‚ùå Adatb√°zis teszt hiba: {e}")
        success = False
    
    return success

def main():
    """F≈ë setup script - VAL√ìS MAGYAR RECEPTEKKEL"""
    print("üöÄ SUSTAINABLE RECIPE RECOMMENDER SETUP")
    print("üá≠üá∫ VAL√ìS MAGYAR RECEPTEK FELDOLGOZ√ÅSA")
    print("=" * 50)
    
    success = True
    
    # 1. K√∂nyvt√°rak l√©trehoz√°sa
    create_directories()
    
    # 2. VAL√ìS magyar receptek feldolgoz√°sa
    success &= process_hungarian_recipes()
    
    # 3. Adatb√°zis s√©ma jav√≠t√°sa
    success &= fix_database_schema()
    
    # 4. Setup tesztel√©se
    success &= test_setup()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ SETUP SIKERES - VAL√ìS MAGYAR RECEPTEKKEL!")
        print("\nüìä EREDM√âNY:")
        
        # CSV inform√°ci√≥k
        if os.path.exists('data/processed_recipes.csv'):
            import pandas as pd
            df = pd.read_csv('data/processed_recipes.csv')
            print(f"‚úÖ Feldolgozott receptek: {len(df)} darab")
            print(f"üçΩÔ∏è Receptek t√≠pusa: {'VAL√ìS magyar receptek' if len(df) > 10 else 'Sample receptek'}")
            
            # Score statisztik√°k
            if 'composite_score' in df.columns:
                print(f"üìà Score tartom√°ny: {df['composite_score'].min():.1f} - {df['composite_score'].max():.1f}")
                print(f"üìä √Åtlagos score: {df['composite_score'].mean():.1f}")
        
        print(f"‚úÖ Adatb√°zis: user_study.db")
        print(f"‚úÖ Tables: participants, interactions, questionnaire")
        
        print("\nüöÄ AZ ALKALMAZ√ÅS K√âSZEN √ÅLL!")
        print("üá≠üá∫ Val√≥s magyar receptekkel m≈±k√∂dik")
        print("üìä Tudom√°nyos adatgy≈±jt√©sre alkalmas")
        
    else:
        print("‚ùå SETUP HIB√ÅKKAL FEJEZ≈êD√ñTT BE!")
        print("‚ö†Ô∏è Fallback sample adatok haszn√°latban")
        print("üîß Ellen≈ërizze a hiba√ºzeneteket")
    
    return success

if __name__ == "__main__":
    main()
