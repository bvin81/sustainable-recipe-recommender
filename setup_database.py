#!/usr/bin/env python3
"""
Enhanced Setup Database Script
Magyar receptek integr√°l√°sa √©s adatb√°zis inicializ√°l√°s
"""

import os
import sys
from pathlib import Path
import pandas as pd
import numpy as np

# Project path setup
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "user_study"))

def process_hungarian_recipes():
    """Magyar receptek feldolgoz√°sa"""
    try:
        # Pr√≥b√°ljuk import√°lni a preprocessor-t
        from recipe_preprocessor import HungarianRecipeProcessor
        
        print("üîß Magyar receptek feldolgoz√°sa...")
        processor = HungarianRecipeProcessor("hungarian_recipes_github.csv")
        
        success = processor.process_all(
            output_path="data/processed_recipes.csv",
            sample_size=50  # 50 recept a user study-hoz
        )
        
        if success:
            print("‚úÖ Magyar receptek sikeresen feldolgozva!")
            return True
        else:
            print("‚ö†Ô∏è Receptek feldolgoz√°sa sikertelen, sample adatok haszn√°lata")
            return create_sample_data()
            
    except ImportError:
        print("‚ö†Ô∏è recipe_preprocessor.py nem tal√°lhat√≥, sample adatok haszn√°lata")
        return create_sample_data()
    except FileNotFoundError:
        print("‚ö†Ô∏è hungarian_recipes_github.csv nem tal√°lhat√≥, sample adatok haszn√°lata")
        return create_sample_data()
    except Exception as e:
        print(f"‚ö†Ô∏è Receptek feldolgoz√°si hiba: {e}")
        return create_sample_data()

def create_sample_data():
    """Sample dataset l√©trehoz√°sa ha nincs val√≥s adat"""
    data_path = Path("data/processed_recipes.csv")
    
    if not data_path.exists():
        print("üîß Sample dataset l√©trehoz√°sa...")
        
        # Magyar mintareceptek realisztikus adatokkal
        recipes_data = []
        
        hungarian_recipes = [
            ("Hagyom√°nyos Guly√°sleves", 
             "marhah√∫s, hagyma, paprika, paradicsom, burgonya, fokhagyma, k√∂m√©ny, majoranna", 
             "1. A h√∫st kock√°kra v√°gjuk √©s enyh√©n megs√≥zzuk. 2. Megdinsztelj√ºk a hagym√°t, hozz√°adjuk a paprik√°t. 3. Fel√∂ntj√ºk v√≠zzel √©s f≈ëzz√ºk 1.5 √≥r√°t. 4. Hozz√°adjuk a burgony√°t √©s tov√°bb f≈ëzz√ºk.", 
             "/static/images/gulyas.jpg", 75.0, 60.0, 90.0),
            
            ("R√°ntott Schnitzel Burgony√°val", 
             "sert√©sh√∫s, liszt, toj√°s, zsemlemorzsa, burgonya, olaj, s√≥, bors", 
             "1. A h√∫st kikalap√°ljuk √©s megs√≥zzuk. 2. Lisztbe, majd felvert toj√°sba, v√©g√ºl zsemlemorzs√°ba forgatjuk. 3. Forr√≥ olajban mindk√©t oldal√°n kis√ºtj√ºk. 4. A burgony√°t h√©j√°ban megf≈ëzz√ºk.", 
             "/static/images/schnitzel.jpg", 55.0, 45.0, 85.0),
            
            ("Veget√°ri√°nus Lecs√≥", 
             "paprika, paradicsom, hagyma, toj√°s, tofu, ol√≠vaolaj, s√≥, bors, fokhagyma", 
             "1. A hagym√°t √©s fokhagym√°t megdinsztelj√ºk ol√≠vaolajban. 2. Hozz√°adjuk a felszeletelt paprik√°t. 3. Paradicsomot √©s kock√°ra v√°gott tofut adunk hozz√°. 4. Toj√°ssal d√∫s√≠tjuk.", 
             "/static/images/lecso.jpg", 85.0, 80.0, 70.0),
            
            ("Hal√°szl√© Szegedi M√≥dra", 
             "ponty, csuka, harcsa, hagyma, paradicsom, paprika, s√≥, bab√©rlev√©l", 
             "1. A halakat megtiszt√≠tjuk √©s feldaraboljuk. 2. A halak fej√©b≈ël √©s fark√°b√≥l er≈ës alapot f≈ëz√ºnk. 3. Az alapot lesz≈±rj√ºk √©s beletessz√ºk a haldarabokat. 4. Paprik√°val √≠zes√≠tj√ºk.", 
             "/static/images/halaszle.jpg", 80.0, 70.0, 75.0),
            
            ("T√∫r√≥s Csusza", 
             "sz√©les met√©lt, t√∫r√≥, tejf√∂l, szalonna, hagyma, s√≥, bors", 
             "1. A t√©szt√°t s√≥s v√≠zben megf≈ëzz√ºk √©s lesz≈±rj√ºk. 2. A szalonn√°t kock√°kra v√°gjuk √©s kis√ºtj√ºk. 3. A t√©szt√°t √∂sszekeverj√ºk a t√∫r√≥val, tejf√∂llel √©s a szalonn√°val.", 
             "/static/images/turos_csusza.jpg", 65.0, 55.0, 80.0),
            
            ("Gombapaprik√°s Galusk√°val", 
             "gomba, hagyma, paprika, tejf√∂l, liszt, toj√°s, petrezselyem, olaj", 
             "1. A gomb√°t felszeletelj√ºk √©s kis√ºtj√ºk. 2. Hagym√°t dinsztel√ºnk, paprik√°t adunk hozz√°. 3. A gomb√°t hozz√°adjuk, tejf√∂llel lefuttatjuk. 4. Galusk√°t f≈ëz√ºnk mell√©.", 
             "/static/images/gombapaprikas.jpg", 70.0, 75.0, 65.0),
            
            ("R√°k√≥czi T√∫r√≥s", 
             "t√∫r√≥, toj√°s, cukor, tejf√∂l, mazsola, citromh√©j, van√≠liapor", 
             "1. A t√∫r√≥t √°tnyomjuk szit√°n √©s √∂sszekeverj√ºk a toj√°sokkal. 2. Cukrot, mazsol√°t √©s citromh√©jat adunk hozz√°. 3. S√ºt≈ëform√°ban megs√ºtj√ºk. 4. Tejf√∂l√∂s kr√©mmel t√°laljuk.", 
             "/static/images/rakoczi_turos.jpg", 60.0, 65.0, 85.0),
            
            ("Z√∂lds√©ges Ratatouille", 
             "cukkini, padlizs√°n, paprika, paradicsom, hagyma, fokhagyma, ol√≠vaolaj, bazsalikom", 
             "1. Az √∂sszes z√∂lds√©get kock√°kra v√°gjuk. 2. A hagym√°t √©s fokhagym√°t megpir√≠tjuk. 3. R√©tegesen hozz√°adjuk a z√∂lds√©geket. 4. Bazsalikommal √©s f≈±szerekkel √≠zes√≠tj√ºk.", 
             "/static/images/ratatouille.jpg", 90.0, 85.0, 60.0),
            
            ("Hortob√°gyi Palacsinta", 
             "palacsinta, csirkeh√∫s, gomba, hagyma, paprika, tejf√∂l, sajt", 
             "1. Palacsint√°t s√ºt√ºnk. 2. A csirkeh√∫st megp√°roljuk gomb√°val √©s hagym√°val. 3. A palacsint√°kat megt√∂ltj√ºk √©s feltekerj√ºk. 4. Tejf√∂l√∂s m√°rt√°ssal s√ºt≈ëben √°tmeleg√≠tj√ºk.", 
             "/static/images/hortobagyi.jpg", 70.0, 60.0, 80.0),
            
            ("Tejf√∂l√∂s Uborkasal√°ta", 
             "uborka, hagyma, tejf√∂l, ecet, cukor, s√≥, kapor", 
             "1. Az ubork√°t v√©kony szeletekre v√°gjuk √©s megs√≥zzuk. 2. 30 perc ut√°n kinyomjuk a lev√©t. 3. Hagym√°t adunk hozz√°. 4. Tejf√∂l√∂s-ecetes √∂ntettel meg√∂ntj√ºk.", 
             "/static/images/uborkasalata.jpg", 85.0, 90.0, 75.0)
        ]
        
        for i, (title, ingredients, instructions, image, hsi, esi, ppi) in enumerate(hungarian_recipes):
            # Kompozit score sz√°m√≠t√°sa: (100-env)*0.4 + nutri*0.4 + meal*0.2
            # ESI m√°r normaliz√°lt form√°ban van (magasabb = jobb k√∂rnyezetileg)
            composite_score = (esi * 0.4) + (hsi * 0.4) + (ppi * 0.2)
            
            recipe = {
                'recipeid': i + 1,
                'title': title,
                'ingredients': ingredients,
                'instructions': instructions,
                'images': image,
                'HSI': hsi,      # Health Score Index (0-100)
                'ESI': esi,      # Environmental Score Index (0-100, magasabb = jobb)
                'PPI': ppi,      # Popularity/Preference Index (0-100)
                'composite_score': round(composite_score, 2)
            }
            recipes_data.append(recipe)
        
        df = pd.DataFrame(recipes_data)
        
        # Create data directory
        os.makedirs('data', exist_ok=True)
        df.to_csv('data/processed_recipes.csv', index=False, encoding='utf-8')
        
        print("‚úÖ Sample dataset l√©trehozva 10 magyar recepttel")
        print(f"üìä HSI range: {df['HSI'].min():.1f} - {df['HSI'].max():.1f}")
        print(f"üå± ESI range: {df['ESI'].min():.1f} - {df['ESI'].max():.1f}")
        print(f"‚≠ê PPI range: {df['PPI'].min():.1f} - {df['PPI'].max():.1f}")
        print(f"üî¢ Composite range: {df['composite_score'].min():.1f} - {df['composite_score'].max():.1f}")
        
        return True
    else:
        print("‚úÖ Dataset m√°r l√©tezik")
        return True

def setup_database():
    """Enhanced database inicializ√°l√°s"""
    try:
        from user_study.user_study import UserStudyDatabase
        
        print("üîß Enhanced user study database inicializ√°l√°sa...")
        db = UserStudyDatabase()
        print("‚úÖ Enhanced database inicializ√°lva")
        
        # Teljes√≠tm√©ny tracking t√°bl√°k ellen≈ërz√©se
        print("üìä Teljes√≠tm√©ny tracking t√°bl√°k ellen≈ërz√©se...")
        
        import sqlite3
        conn = sqlite3.connect(db.db_path)
        cursor = conn.cursor()
        
        # Ellen≈ërizz√ºk hogy az √∫j t√°bl√°k l√©teznek
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        expected_tables = ['participants', 'interactions', 'questionnaire', 'recipe_performance']
        missing_tables = [table for table in expected_tables if table not in tables]
        
        if missing_tables:
            print(f"‚ö†Ô∏è Hi√°nyz√≥ t√°bl√°k: {missing_tables}")
        else:
            print("‚úÖ Minden sz√ºks√©ges t√°bla l√©tezik")
        
        conn.close()
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Enhanced user study module m√©g nem tal√°lhat√≥")
        print("   Ezt a hib√°t a user_study.py enhanced verzi√≥ra cser√©l√©se oldja meg")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Database setup warning: {e}")
        return True

def create_static_directories():
    """Static k√∂nyvt√°rak l√©trehoz√°sa"""
    print("üìÅ Static k√∂nyvt√°rak l√©trehoz√°sa...")
    
    directories = [
        "static",
        "static/images",
        "static/css", 
        "static/js",
        "results",
        "results/user_study_plots",
        "results/spss_export"
    ]
    
    for directory in directories:
        dir_path = Path(directory)
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ L√©trehozva: {directory}")
        else:
            print(f"   ‚úÖ M√°r l√©tezik: {directory}")
    
    # Placeholder k√©p l√©trehoz√°sa (ha nincs)
    placeholder_path = Path("static/images/recipe_placeholder.jpg")
    if not placeholder_path.exists():
        print("   üñºÔ∏è Recipe placeholder k√©sz√≠t√©se...")
        # Egyszer≈± placeholder - production-ben cser√©ld le val√≥s k√©pekre
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # 400x300 placeholder k√©p
            img = Image.new('RGB', (400, 300), color='#f8f9fa')
            draw = ImageDraw.Draw(img)
            
            # Sz√∂veg hozz√°ad√°sa
            try:
                font = ImageFont.truetype("arial.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            text = "Recept K√©p\nHamarosan"
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            position = ((400 - text_width) // 2, (300 - text_height) // 2)
            draw.text(position, text, fill='#6c757d', font=font, align='center')
            
            img.save(placeholder_path)
            print("   ‚úÖ Placeholder k√©p l√©trehozva")
            
        except ImportError:
            print("   ‚ö†Ô∏è Pillow nem el√©rhet≈ë, placeholder k√©p kihagyva")
    
    return True

def validate_setup():
    """Setup valid√°l√°sa"""
    print("\nüîç SETUP VALID√ÅL√ÅS:")
    print("-" * 30)
    
    validations = []
    
    # 1. Receptek CSV
    csv_path = Path("data/processed_recipes.csv")
    if csv_path.exists():
        try:
            df = pd.read_csv(csv_path)
            required_columns = ['recipeid', 'title', 'ingredients', 'HSI', 'ESI', 'PPI', 'composite_score']
            missing_cols = [col for col in required_columns if col not in df.columns]
            
            if missing_cols:
                validations.append(f"‚ùå Hi√°nyz√≥ oszlopok: {missing_cols}")
            else:
                validations.append(f"‚úÖ Receptek CSV: {len(df)} recept, minden oszlop OK")
        except Exception as e:
            validations.append(f"‚ùå CSV olvas√°si hiba: {e}")
    else:
        validations.append("‚ùå processed_recipes.csv nem tal√°lhat√≥")
    
    # 2. K√∂nyvt√°rak
    required_dirs = ['data', 'static', 'static/images', 'results']
    for directory in required_dirs:
        if Path(directory).exists():
            validations.append(f"‚úÖ K√∂nyvt√°r: {directory}")
        else:
            validations.append(f"‚ùå Hi√°nyz√≥ k√∂nyvt√°r: {directory}")
    
    # 3. User study modul
    try:
        from user_study.user_study import UserStudyDatabase, EnhancedRecipeRecommender
        validations.append("‚úÖ Enhanced user study modul bet√∂lthet≈ë")
    except ImportError:
        validations.append("‚ùå Enhanced user study modul nem tal√°lhat√≥")
    
    # 4. Database
    try:
        import sqlite3
        if Path("user_study.db").exists():
            validations.append("‚úÖ SQLite database l√©tezik")
        else:
            validations.append("‚ö†Ô∏è SQLite database m√©g nincs l√©trehozva")
    except ImportError:
        validations.append("‚ùå SQLite nem el√©rhet≈ë")
    
    # Eredm√©nyek ki√≠r√°sa
    for validation in validations:
        print(f"   {validation}")
    
    # √ñsszes√≠t√©s
    success_count = len([v for v in validations if v.startswith("‚úÖ")])
    warning_count = len([v for v in validations if v.startswith("‚ö†Ô∏è")])
    error_count = len([v for v in validations if v.startswith("‚ùå")])
    
    print(f"\nüìä VALID√ÅL√ÅS EREDM√âNYE:")
    print(f"   ‚úÖ Sikeres: {success_count}")
    print(f"   ‚ö†Ô∏è Figyelmeztet√©s: {warning_count}")
    print(f"   ‚ùå Hiba: {error_count}")
    
    if error_count == 0:
        print("üéâ SETUP SIKERES!")
        return True
    else:
        print("‚ö†Ô∏è SETUP R√âSZBEN SIKERES - jav√≠t√°sok sz√ºks√©gesek")
        return False

if __name__ == "__main__":
    print("üöÄ Enhanced Sustainable Recipe Recommender Setup")
    print("=" * 55)
    
    success = True
    
    # 1. Magyar receptek feldolgoz√°sa
    success &= process_hungarian_recipes()
    
    # 2. Static k√∂nyvt√°rak
    success &= create_static_directories()
    
    # 3. Database setup
    success &= setup_database()
    
    # 4. Valid√°l√°s
    validation_success = validate_setup()
    
    print("\n" + "=" * 55)
    if success and validation_success:
        print("üéâ TELJES SETUP SIKERES!")
        print("\nüìã A rendszer k√©szen √°ll:")
        print("   ‚úÖ Magyar receptek integr√°lva")
        print("   ‚úÖ Verzi√≥ inform√°ci√≥ elrejtve")
        print("   ‚úÖ K√©pek √©s instrukci√≥k t√°mogat√°sa")
        print("   ‚úÖ Precision/Recall metrik√°k")
        print("   ‚úÖ Enhanced admin dashboard")
        
        print("\nüöÄ K√∂vetkez≈ë l√©p√©sek:")
        print("   1. GitHub deploy v√°rja")
        print("   2. App URL tesztel√©se")
        print("   3. Teljes user journey v√©gigpr√≥b√°l√°sa")
        print("   4. Admin stats ellen≈ërz√©se")
        print("   5. Launch campaign kezd√©s!")
        
    else:
        print("‚ö†Ô∏è SETUP BEFEJEZVE FIGYELMEZTET√âSEKKEL")
        print("\nüîß Lehets√©ges jav√≠t√°sok:")
        print("   - Enhanced user_study.py felt√∂lt√©se")
        print("   - hungarian_recipes_github.csv hozz√°ad√°sa")
        print("   - Template f√°jlok l√©trehoz√°sa")
    
    print(f"\nüìä Dataset st√°tusz: {Path('data/processed_recipes.csv').exists()}")
    print(f"üìÅ Static images: {Path('static/images').exists()}")
    
    print("\nüí° Gyors teszt: python -c \"from user_study.user_study import *; print('‚úÖ Enhanced modules OK')\"")
